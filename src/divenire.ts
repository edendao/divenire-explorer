// Generated by @wagmi/cli@0.1.2 on 2/9/2023 at 6:23:58 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Certificates
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const certificatesABI = [
  {
    type: 'error',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'Certificates__ValuesException',
  },
  { type: 'error', inputs: [], name: 'ComponentFacet__Initialized' },
  { type: 'error', inputs: [], name: 'ERC1155Base__ArrayLengthMismatch' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BalanceQueryZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BurnExceedsBalance' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BurnFromZeroAddress' },
  {
    type: 'error',
    inputs: [],
    name: 'ERC1155Base__ERC1155ReceiverNotImplemented',
  },
  { type: 'error', inputs: [], name: 'ERC1155Base__ERC1155ReceiverRejected' },
  { type: 'error', inputs: [], name: 'ERC1155Base__MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC1155Base__NotOwnerOrApproved' },
  { type: 'error', inputs: [], name: 'ERC1155Base__SelfApproval' },
  { type: 'error', inputs: [], name: 'ERC1155Base__TransferExceedsBalance' },
  { type: 'error', inputs: [], name: 'ERC1155Base__TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'EnumerableSet__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'CertificatesMatcher__ValidationFailed' },
  {
    type: 'error',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'CertificatesMetadata__EvaluationException',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'accountsByToken',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'certificateID', internalType: 'uint256', type: 'uint256' },
      { name: 'certificateCount', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'burn',
    outputs: [
      { name: 'claimID', internalType: 'uint128', type: 'uint128' },
      { name: 'claimCount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'claimID', internalType: 'uint128', type: 'uint128' },
      { name: 'methodologyID', internalType: 'uint64', type: 'uint64' },
      { name: 'claimCount', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'mint',
    outputs: [
      { name: 'certificateID', internalType: 'uint256', type: 'uint256' },
      { name: 'certificateCount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'status', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'tokensByAccount',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalHolders',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'propertyData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'validateProperty',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Group
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const groupABI = [
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'Factory__FailedDeployment' },
  { type: 'error', inputs: [], name: 'GroupAccess__InitializeFailed' },
  { type: 'error', inputs: [], name: 'GroupAccess__InvalidAuthority' },
  { type: 'error', inputs: [], name: 'GroupAccess__Unauthorized' },
  { type: 'error', inputs: [], name: 'ComponentFacet__Initialized' },
  { type: 'error', inputs: [], name: 'GroupAccessToken__InvalidRecipient' },
  { type: 'error', inputs: [], name: 'GroupAccessToken__Limit' },
  { type: 'error', inputs: [], name: 'GroupAccessToken__Unauthorized' },
  { type: 'error', inputs: [], name: 'ERC721Base__BalanceQueryZeroAddress' },
  {
    type: 'error',
    inputs: [],
    name: 'ERC721Base__ERC721ReceiverNotImplemented',
  },
  { type: 'error', inputs: [], name: 'ERC721Base__InvalidOwner' },
  { type: 'error', inputs: [], name: 'ERC721Base__MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC721Base__NonExistentToken' },
  { type: 'error', inputs: [], name: 'ERC721Base__NotOwnerOrApproved' },
  { type: 'error', inputs: [], name: 'ERC721Base__NotTokenOwner' },
  { type: 'error', inputs: [], name: 'ERC721Base__SelfApproval' },
  { type: 'error', inputs: [], name: 'ERC721Base__TokenAlreadyMinted' },
  { type: 'error', inputs: [], name: 'ERC721Base__TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC721Metadata__NonExistentToken' },
  { type: 'error', inputs: [], name: 'GroupInternal__Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint64', type: 'uint64', indexed: true },
      {
        name: 'authority',
        internalType: 'contract IAuthority',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorityUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'MetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint64', type: 'uint64', indexed: true },
      {
        name: 'metadataURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'MetadataUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint64', type: 'uint64' },
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'sig', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'canCall',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      {
        name: '_authority',
        internalType: 'contract IAuthority',
        type: 'address',
      },
    ],
    name: 'createAuthority',
    outputs: [
      {
        name: 'authority',
        internalType: 'contract IAuthority',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint64', type: 'uint64' }],
    name: 'createDefaultAuthority',
    outputs: [
      {
        name: 'authority',
        internalType: 'contract IAuthority',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint64', type: 'uint64' }],
    name: 'getAuthority',
    outputs: [
      { name: '', internalType: 'contract IAuthority', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint64', type: 'uint64' },
      {
        name: 'authority',
        internalType: 'contract IAuthority',
        type: 'address',
      },
    ],
    name: 'setAuthority',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'create',
    outputs: [{ name: 'id', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint64', type: 'uint64' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'setTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Impact
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const impactABI = [
  { type: 'error', inputs: [], name: 'ComponentFacet__Initialized' },
  { type: 'error', inputs: [], name: 'ERC1155Base__ArrayLengthMismatch' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BalanceQueryZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BurnExceedsBalance' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BurnFromZeroAddress' },
  {
    type: 'error',
    inputs: [],
    name: 'ERC1155Base__ERC1155ReceiverNotImplemented',
  },
  { type: 'error', inputs: [], name: 'ERC1155Base__ERC1155ReceiverRejected' },
  { type: 'error', inputs: [], name: 'ERC1155Base__MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC1155Base__NotOwnerOrApproved' },
  { type: 'error', inputs: [], name: 'ERC1155Base__SelfApproval' },
  { type: 'error', inputs: [], name: 'ERC1155Base__TransferExceedsBalance' },
  { type: 'error', inputs: [], name: 'ERC1155Base__TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'EnumerableSet__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'ImpactClaims__InvalidCaller' },
  { type: 'error', inputs: [], name: 'ImpactInternal__CallFailed' },
  { type: 'error', inputs: [], name: 'ImpactInternal__Unauthorized' },
  { type: 'error', inputs: [], name: 'ImpactNonces__Invalid' },
  { type: 'error', inputs: [], name: 'ImpactEvaluations__InvalidCaller' },
  {
    type: 'error',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'ImpactReader__InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'ImpactReader__InvalidEvaluation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'signer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'generatorID',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
      {
        name: 'recordID',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
      {
        name: 'validFrom',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'validTo',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      { name: 'value', internalType: 'uint32', type: 'uint32', indexed: false },
      { name: 'uri', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'Claimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'signer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'generatorID',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
      {
        name: 'recordID',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
    ],
    name: 'RevokedClaim',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'signer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'methodologyID',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
      {
        name: 'claimID',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'validFrom',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'validTo',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      { name: 'value', internalType: 'uint32', type: 'uint32', indexed: false },
      { name: 'uri', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'Evaluated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'signer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'methodologyID',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
      {
        name: 'claimID',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
    ],
    name: 'RevokedEvaluation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'URI',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'wordPos',
        internalType: 'uint248',
        type: 'uint248',
        indexed: true,
      },
      {
        name: 'mask',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UnorderedNonceInvalidation',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CLAIM_PARAMS_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REVOKE_CLAIM_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'accountsByToken',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'claimID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactClaims.ClaimParams',
        type: 'tuple',
        components: [
          { name: 'generatorID', internalType: 'uint64', type: 'uint64' },
          {
            name: 'attestation',
            internalType: 'struct AttestationLib.Value',
            type: 'tuple',
            components: [
              { name: 'signer', internalType: 'address', type: 'address' },
              { name: 'validFrom', internalType: 'uint32', type: 'uint32' },
              { name: 'validTo', internalType: 'uint32', type: 'uint32' },
              { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
              { name: 'value', internalType: 'uint32', type: 'uint32' },
              { name: 'uri', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
    ],
    name: 'claim',
    outputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactClaims.ClaimParams',
        type: 'tuple',
        components: [
          { name: 'generatorID', internalType: 'uint64', type: 'uint64' },
          {
            name: 'attestation',
            internalType: 'struct AttestationLib.Value',
            type: 'tuple',
            components: [
              { name: 'signer', internalType: 'address', type: 'address' },
              { name: 'validFrom', internalType: 'uint32', type: 'uint32' },
              { name: 'validTo', internalType: 'uint32', type: 'uint32' },
              { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
              { name: 'value', internalType: 'uint32', type: 'uint32' },
              { name: 'uri', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'claimWithSignature',
    outputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactClaims.ClaimParams',
        type: 'tuple',
        components: [
          { name: 'generatorID', internalType: 'uint64', type: 'uint64' },
          {
            name: 'attestation',
            internalType: 'struct AttestationLib.Value',
            type: 'tuple',
            components: [
              { name: 'signer', internalType: 'address', type: 'address' },
              { name: 'validFrom', internalType: 'uint32', type: 'uint32' },
              { name: 'validTo', internalType: 'uint32', type: 'uint32' },
              { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
              { name: 'value', internalType: 'uint32', type: 'uint32' },
              { name: 'uri', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
    ],
    name: 'getClaimDataHash',
    outputs: [{ name: 'dataHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactClaims.RevokeClaimParams',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'address', type: 'address' },
          { name: 'claimID', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
    name: 'getRevokeClaimDataHash',
    outputs: [{ name: 'dataHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactClaims.RevokeClaimParams',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'address', type: 'address' },
          { name: 'claimID', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
    name: 'revokeClaim',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactClaims.RevokeClaimParams',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'address', type: 'address' },
          { name: 'claimID', internalType: 'uint128', type: 'uint128' },
        ],
      },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revokeClaimWithSignature',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'status', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'tokensByAccount',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalHolders',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EVALUATION_PARAMS_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REVOKE_EVALUATION_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactEvaluations.EvaluationParams',
        type: 'tuple',
        components: [
          { name: 'methodologyID', internalType: 'uint64', type: 'uint64' },
          { name: 'claimID', internalType: 'uint128', type: 'uint128' },
          {
            name: 'attestation',
            internalType: 'struct AttestationLib.Value',
            type: 'tuple',
            components: [
              { name: 'signer', internalType: 'address', type: 'address' },
              { name: 'validFrom', internalType: 'uint32', type: 'uint32' },
              { name: 'validTo', internalType: 'uint32', type: 'uint32' },
              { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
              { name: 'value', internalType: 'uint32', type: 'uint32' },
              { name: 'uri', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
    ],
    name: 'evaluate',
    outputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactEvaluations.EvaluationParams',
        type: 'tuple',
        components: [
          { name: 'methodologyID', internalType: 'uint64', type: 'uint64' },
          { name: 'claimID', internalType: 'uint128', type: 'uint128' },
          {
            name: 'attestation',
            internalType: 'struct AttestationLib.Value',
            type: 'tuple',
            components: [
              { name: 'signer', internalType: 'address', type: 'address' },
              { name: 'validFrom', internalType: 'uint32', type: 'uint32' },
              { name: 'validTo', internalType: 'uint32', type: 'uint32' },
              { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
              { name: 'value', internalType: 'uint32', type: 'uint32' },
              { name: 'uri', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'evaluateWithSignature',
    outputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactEvaluations.EvaluationParams',
        type: 'tuple',
        components: [
          { name: 'methodologyID', internalType: 'uint64', type: 'uint64' },
          { name: 'claimID', internalType: 'uint128', type: 'uint128' },
          {
            name: 'attestation',
            internalType: 'struct AttestationLib.Value',
            type: 'tuple',
            components: [
              { name: 'signer', internalType: 'address', type: 'address' },
              { name: 'validFrom', internalType: 'uint32', type: 'uint32' },
              { name: 'validTo', internalType: 'uint32', type: 'uint32' },
              { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
              { name: 'value', internalType: 'uint32', type: 'uint32' },
              { name: 'uri', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
    ],
    name: 'getEvaluationDataHash',
    outputs: [{ name: 'dataHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactEvaluations.RevokeEvaluationParams',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'address', type: 'address' },
          { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
        ],
      },
    ],
    name: 'getSignedRevokeEvaluationDataHash',
    outputs: [{ name: 'dataHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactEvaluations.RevokeEvaluationParams',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'address', type: 'address' },
          { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
        ],
      },
    ],
    name: 'revokeEvaluation',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct ImpactEvaluations.RevokeEvaluationParams',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'address', type: 'address' },
          { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
        ],
      },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revokeEvaluationWithSignature',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'claimExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'evaluationExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'isRevokedClaim',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'isRevokedEvaluation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'isValidClaim',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'isValidEvaluation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'readClaim',
    outputs: [
      {
        name: '',
        internalType: 'struct AttestationLib.Value',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'address', type: 'address' },
          { name: 'validFrom', internalType: 'uint32', type: 'uint32' },
          { name: 'validTo', internalType: 'uint32', type: 'uint32' },
          { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
          { name: 'value', internalType: 'uint32', type: 'uint32' },
          { name: 'uri', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'readClaimAndEvaluationValue',
    outputs: [
      { name: 'claimValue', internalType: 'uint32', type: 'uint32' },
      { name: 'evaluationValue', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'readClaimURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'readClaimValue',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'readEvaluation',
    outputs: [
      {
        name: '',
        internalType: 'struct AttestationLib.Value',
        type: 'tuple',
        components: [
          { name: 'signer', internalType: 'address', type: 'address' },
          { name: 'validFrom', internalType: 'uint32', type: 'uint32' },
          { name: 'validTo', internalType: 'uint32', type: 'uint32' },
          { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
          { name: 'value', internalType: 'uint32', type: 'uint32' },
          { name: 'uri', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'readEvaluationURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'readEvaluationValue',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'claimID', internalType: 'uint128', type: 'uint128' },
      { name: 'methodologyIDs', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'validAtTimestamp', internalType: 'uint32[]', type: 'uint32[]' },
    ],
    name: 'validateEvaluations',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ATTESTATION_VALUE_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'dataHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'invalidateDataHash',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'wordPos', internalType: 'uint248', type: 'uint248' },
      { name: 'mask', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'invalidateUnorderedNonces',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'decodeClaimGeneratorID',
    outputs: [{ name: 'generatorID', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'decodeClaimID',
    outputs: [
      { name: 'generatorID', internalType: 'uint64', type: 'uint64' },
      { name: 'recordID', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
    name: 'decodeClaimRecordID',
    outputs: [{ name: 'recordID', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'decodeEvaluationClaimID',
    outputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'decodeEvaluationGeneratorID',
    outputs: [{ name: 'generatorID', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'decodeEvaluationID',
    outputs: [
      { name: 'methodologyID', internalType: 'uint64', type: 'uint64' },
      { name: 'generatorID', internalType: 'uint64', type: 'uint64' },
      { name: 'recordID', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'decodeEvaluationMethodologyID',
    outputs: [
      { name: 'methodologyID', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'decodeEvaluationRecordID',
    outputs: [{ name: 'recordID', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'methodologyID', internalType: 'uint64', type: 'uint64' },
      { name: 'claimID', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'encodeEvaluationID',
    outputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'methodologyID', internalType: 'uint64', type: 'uint64' },
      { name: 'generatorID', internalType: 'uint64', type: 'uint64' },
      { name: 'recordID', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'encodeEvaluationID',
    outputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Retirements
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const retirementsABI = [
  { type: 'error', inputs: [], name: 'ComponentFacet__Initialized' },
  { type: 'error', inputs: [], name: 'ERC1155Base__ArrayLengthMismatch' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BalanceQueryZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BurnExceedsBalance' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BurnFromZeroAddress' },
  {
    type: 'error',
    inputs: [],
    name: 'ERC1155Base__ERC1155ReceiverNotImplemented',
  },
  { type: 'error', inputs: [], name: 'ERC1155Base__ERC1155ReceiverRejected' },
  { type: 'error', inputs: [], name: 'ERC1155Base__MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC1155Base__NotOwnerOrApproved' },
  { type: 'error', inputs: [], name: 'ERC1155Base__SelfApproval' },
  { type: 'error', inputs: [], name: 'ERC1155Base__TransferExceedsBalance' },
  { type: 'error', inputs: [], name: 'ERC1155Base__TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'EnumerableSet__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'Retirements__Immovable' },
  {
    type: 'error',
    inputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'RetirementsMetadata__EvaluationException',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'accountsByToken',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'receiptID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'certificateIDs', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'certificateAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'issue',
    outputs: [
      { name: 'retirementIDs', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'tokensByAccount',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalHolders',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'retirementID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decodeRetirementClaimID',
    outputs: [{ name: 'claimID', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'retirementID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decodeRetirementEvaluationID',
    outputs: [
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'retirementID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decodeRetirementID',
    outputs: [
      { name: 'receiptID', internalType: 'uint64', type: 'uint64' },
      { name: 'methodologyID', internalType: 'uint64', type: 'uint64' },
      { name: 'generatorID', internalType: 'uint64', type: 'uint64' },
      { name: 'recordID', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'receiptID', internalType: 'uint64', type: 'uint64' },
      { name: 'evaluationID', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'encodeRetirementID',
    outputs: [
      { name: 'retirementID', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link certificatesABI}__.
 */
export function useCertificates(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: certificatesABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__.
 */
export function useCertificatesRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"accountsByToken"`.
 */
export function useCertificatesAccountsByToken(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'accountsByToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'accountsByToken',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'accountsByToken'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCertificatesBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useCertificatesBalanceOfBatch(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'balanceOfBatch'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'balanceOfBatch'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCertificatesIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'isApprovedForAll'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useCertificatesOnErc1155BatchReceived(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'onERC1155BatchReceived'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useCertificatesOnErc1155Received(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'onERC1155Received'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"tokensByAccount"`.
 */
export function useCertificatesTokensByAccount(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'tokensByAccount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'tokensByAccount',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'tokensByAccount'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"totalHolders"`.
 */
export function useCertificatesTotalHolders(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'totalHolders'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'totalHolders',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'totalHolders'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCertificatesTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'totalSupply'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"validateProperty"`.
 */
export function useCertificatesValidateProperty(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'validateProperty'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'validateProperty',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'validateProperty'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"name"`.
 */
export function useCertificatesName(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"symbol"`.
 */
export function useCertificatesSymbol(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"uri"`.
 */
export function useCertificatesUri(
  config: Omit<
    UseContractReadConfig<typeof certificatesABI, 'uri'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: certificatesABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof certificatesABI, 'uri'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificatesABI}__.
 */
export function useCertificatesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof certificatesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof certificatesABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof certificatesABI, TFunctionName>({
    abi: certificatesABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"burn"`.
 */
export function useCertificatesBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof certificatesABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof certificatesABI, 'burn'> & {
        abi?: never;
        functionName?: 'burn';
      } = {} as any
) {
  return useContractWrite<TMode, typeof certificatesABI, 'burn'>({
    abi: certificatesABI,
    functionName: 'burn',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"mint"`.
 */
export function useCertificatesMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof certificatesABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof certificatesABI, 'mint'> & {
        abi?: never;
        functionName?: 'mint';
      } = {} as any
) {
  return useContractWrite<TMode, typeof certificatesABI, 'mint'>({
    abi: certificatesABI,
    functionName: 'mint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useCertificatesSafeBatchTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof certificatesABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof certificatesABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeBatchTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof certificatesABI,
    'safeBatchTransferFrom'
  >({
    abi: certificatesABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCertificatesSafeTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof certificatesABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof certificatesABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof certificatesABI, 'safeTransferFrom'>({
    abi: certificatesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCertificatesSetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof certificatesABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof certificatesABI,
        'setApprovalForAll'
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof certificatesABI, 'setApprovalForAll'>({
    abi: certificatesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"multicall"`.
 */
export function useCertificatesMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof certificatesABI, 'multicall'>['abi'],
        'multicall'
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof certificatesABI, 'multicall'> & {
        abi?: never;
        functionName?: 'multicall';
      } = {} as any
) {
  return useContractWrite<TMode, typeof certificatesABI, 'multicall'>({
    abi: certificatesABI,
    functionName: 'multicall',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificatesABI}__.
 */
export function usePrepareCertificatesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof certificatesABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: certificatesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof certificatesABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareCertificatesBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof certificatesABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: certificatesABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof certificatesABI, 'burn'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareCertificatesMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof certificatesABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: certificatesABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof certificatesABI, 'mint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareCertificatesSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof certificatesABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: certificatesABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof certificatesABI, 'safeBatchTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCertificatesSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof certificatesABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: certificatesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof certificatesABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCertificatesSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof certificatesABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: certificatesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof certificatesABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificatesABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareCertificatesMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof certificatesABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: certificatesABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof certificatesABI, 'multicall'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificatesABI}__.
 */
export function useCertificatesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof certificatesABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: certificatesABI,
    ...config,
  } as UseContractEventConfig<typeof certificatesABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificatesABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCertificatesApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof certificatesABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: certificatesABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof certificatesABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificatesABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useCertificatesTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof certificatesABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: certificatesABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof certificatesABI, 'TransferBatch'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificatesABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useCertificatesTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof certificatesABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: certificatesABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof certificatesABI, 'TransferSingle'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificatesABI}__ and `eventName` set to `"URI"`.
 */
export function useCertificatesUriEvent(
  config: Omit<
    UseContractEventConfig<typeof certificatesABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: certificatesABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof certificatesABI, 'URI'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link groupABI}__.
 */
export function useGroup(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: groupABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__.
 */
export function useGroupRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof groupABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: groupABI, ...config } as UseContractReadConfig<
    typeof groupABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"canCall"`.
 */
export function useGroupCanCall(
  config: Omit<
    UseContractReadConfig<typeof groupABI, 'canCall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: groupABI,
    functionName: 'canCall',
    ...config,
  } as UseContractReadConfig<typeof groupABI, 'canCall'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"getAuthority"`.
 */
export function useGroupGetAuthority(
  config: Omit<
    UseContractReadConfig<typeof groupABI, 'getAuthority'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: groupABI,
    functionName: 'getAuthority',
    ...config,
  } as UseContractReadConfig<typeof groupABI, 'getAuthority'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useGroupBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof groupABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: groupABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof groupABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"getApproved"`.
 */
export function useGroupGetApproved(
  config: Omit<
    UseContractReadConfig<typeof groupABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: groupABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof groupABI, 'getApproved'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useGroupIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof groupABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: groupABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof groupABI, 'isApprovedForAll'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useGroupOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof groupABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: groupABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof groupABI, 'ownerOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"name"`.
 */
export function useGroupName(
  config: Omit<
    UseContractReadConfig<typeof groupABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: groupABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof groupABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"symbol"`.
 */
export function useGroupSymbol(
  config: Omit<
    UseContractReadConfig<typeof groupABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: groupABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof groupABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useGroupTokenUri(
  config: Omit<
    UseContractReadConfig<typeof groupABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: groupABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof groupABI, 'tokenURI'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__.
 */
export function useGroupWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof groupABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, TFunctionName>({
    abi: groupABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"createAuthority"`.
 */
export function useGroupCreateAuthority<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, 'createAuthority'>['abi'],
        'createAuthority'
      > & { functionName?: 'createAuthority' }
    : UseContractWriteConfig<TMode, typeof groupABI, 'createAuthority'> & {
        abi?: never;
        functionName?: 'createAuthority';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'createAuthority'>({
    abi: groupABI,
    functionName: 'createAuthority',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"createDefaultAuthority"`.
 */
export function useGroupCreateDefaultAuthority<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof groupABI,
          'createDefaultAuthority'
        >['abi'],
        'createDefaultAuthority'
      > & { functionName?: 'createDefaultAuthority' }
    : UseContractWriteConfig<
        TMode,
        typeof groupABI,
        'createDefaultAuthority'
      > & {
        abi?: never;
        functionName?: 'createDefaultAuthority';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'createDefaultAuthority'>({
    abi: groupABI,
    functionName: 'createDefaultAuthority',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"setAuthority"`.
 */
export function useGroupSetAuthority<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, 'setAuthority'>['abi'],
        'setAuthority'
      > & { functionName?: 'setAuthority' }
    : UseContractWriteConfig<TMode, typeof groupABI, 'setAuthority'> & {
        abi?: never;
        functionName?: 'setAuthority';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'setAuthority'>({
    abi: groupABI,
    functionName: 'setAuthority',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"approve"`.
 */
export function useGroupApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof groupABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'approve'>({
    abi: groupABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"create"`.
 */
export function useGroupCreate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, 'create'>['abi'],
        'create'
      > & { functionName?: 'create' }
    : UseContractWriteConfig<TMode, typeof groupABI, 'create'> & {
        abi?: never;
        functionName?: 'create';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'create'>({
    abi: groupABI,
    functionName: 'create',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useGroupSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof groupABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'safeTransferFrom'>({
    abi: groupABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useGroupSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof groupABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'setApprovalForAll'>({
    abi: groupABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useGroupTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof groupABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'transferFrom'>({
    abi: groupABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function useGroupSetTokenUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, 'setTokenURI'>['abi'],
        'setTokenURI'
      > & { functionName?: 'setTokenURI' }
    : UseContractWriteConfig<TMode, typeof groupABI, 'setTokenURI'> & {
        abi?: never;
        functionName?: 'setTokenURI';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'setTokenURI'>({
    abi: groupABI,
    functionName: 'setTokenURI',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"multicall"`.
 */
export function useGroupMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof groupABI, 'multicall'>['abi'],
        'multicall'
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof groupABI, 'multicall'> & {
        abi?: never;
        functionName?: 'multicall';
      } = {} as any
) {
  return useContractWrite<TMode, typeof groupABI, 'multicall'>({
    abi: groupABI,
    functionName: 'multicall',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__.
 */
export function usePrepareGroupWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"createAuthority"`.
 */
export function usePrepareGroupCreateAuthority(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'createAuthority'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'createAuthority',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'createAuthority'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"createDefaultAuthority"`.
 */
export function usePrepareGroupCreateDefaultAuthority(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'createDefaultAuthority'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'createDefaultAuthority',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'createDefaultAuthority'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"setAuthority"`.
 */
export function usePrepareGroupSetAuthority(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'setAuthority'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'setAuthority',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'setAuthority'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareGroupApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareGroupCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'create'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'create',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'create'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareGroupSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareGroupSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareGroupTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePrepareGroupSetTokenUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'setTokenURI'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'setTokenURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'setTokenURI'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link groupABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareGroupMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof groupABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: groupABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof groupABI, 'multicall'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link groupABI}__.
 */
export function useGroupEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof groupABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: groupABI,
    ...config,
  } as UseContractEventConfig<typeof groupABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link groupABI}__ and `eventName` set to `"AuthorityUpdated"`.
 */
export function useGroupAuthorityUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof groupABI, 'AuthorityUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: groupABI,
    eventName: 'AuthorityUpdated',
    ...config,
  } as UseContractEventConfig<typeof groupABI, 'AuthorityUpdated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link groupABI}__ and `eventName` set to `"Approval"`.
 */
export function useGroupApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof groupABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: groupABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof groupABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link groupABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useGroupApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof groupABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: groupABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof groupABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link groupABI}__ and `eventName` set to `"Transfer"`.
 */
export function useGroupTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof groupABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: groupABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof groupABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link groupABI}__ and `eventName` set to `"MetadataUpdate"`.
 */
export function useGroupMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof groupABI, 'MetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: groupABI,
    eventName: 'MetadataUpdate',
    ...config,
  } as UseContractEventConfig<typeof groupABI, 'MetadataUpdate'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link groupABI}__ and `eventName` set to `"MetadataUpdated"`.
 */
export function useGroupMetadataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof groupABI, 'MetadataUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: groupABI,
    eventName: 'MetadataUpdated',
    ...config,
  } as UseContractEventConfig<typeof groupABI, 'MetadataUpdated'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link impactABI}__.
 */
export function useImpact(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: impactABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__.
 */
export function useImpactRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof impactABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: impactABI, ...config } as UseContractReadConfig<
    typeof impactABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"CLAIM_PARAMS_TYPEHASH"`.
 */
export function useImpactClaimParamsTypehash(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'CLAIM_PARAMS_TYPEHASH'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'CLAIM_PARAMS_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'CLAIM_PARAMS_TYPEHASH'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"REVOKE_CLAIM_TYPEHASH"`.
 */
export function useImpactRevokeClaimTypehash(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'REVOKE_CLAIM_TYPEHASH'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'REVOKE_CLAIM_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'REVOKE_CLAIM_TYPEHASH'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"accountsByToken"`.
 */
export function useImpactAccountsByToken(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'accountsByToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'accountsByToken',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'accountsByToken'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useImpactBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useImpactBalanceOfBatch(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'balanceOfBatch'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'balanceOfBatch'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"getClaimDataHash"`.
 */
export function useImpactGetClaimDataHash(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'getClaimDataHash'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'getClaimDataHash',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'getClaimDataHash'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"getRevokeClaimDataHash"`.
 */
export function useImpactGetRevokeClaimDataHash(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'getRevokeClaimDataHash'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'getRevokeClaimDataHash',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'getRevokeClaimDataHash'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useImpactIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'isApprovedForAll'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"tokensByAccount"`.
 */
export function useImpactTokensByAccount(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'tokensByAccount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'tokensByAccount',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'tokensByAccount'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"totalHolders"`.
 */
export function useImpactTotalHolders(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'totalHolders'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'totalHolders',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'totalHolders'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useImpactTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'totalSupply'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"EVALUATION_PARAMS_TYPEHASH"`.
 */
export function useImpactEvaluationParamsTypehash(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'EVALUATION_PARAMS_TYPEHASH'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'EVALUATION_PARAMS_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'EVALUATION_PARAMS_TYPEHASH'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"REVOKE_EVALUATION_TYPEHASH"`.
 */
export function useImpactRevokeEvaluationTypehash(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'REVOKE_EVALUATION_TYPEHASH'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'REVOKE_EVALUATION_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'REVOKE_EVALUATION_TYPEHASH'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"getEvaluationDataHash"`.
 */
export function useImpactGetEvaluationDataHash(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'getEvaluationDataHash'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'getEvaluationDataHash',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'getEvaluationDataHash'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"getSignedRevokeEvaluationDataHash"`.
 */
export function useImpactGetSignedRevokeEvaluationDataHash(
  config: Omit<
    UseContractReadConfig<
      typeof impactABI,
      'getSignedRevokeEvaluationDataHash'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'getSignedRevokeEvaluationDataHash',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'getSignedRevokeEvaluationDataHash'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"name"`.
 */
export function useImpactName(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"symbol"`.
 */
export function useImpactSymbol(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"uri"`.
 */
export function useImpactUri(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'uri'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'uri'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"claimExists"`.
 */
export function useImpactClaimExists(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'claimExists'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'claimExists',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'claimExists'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"evaluationExists"`.
 */
export function useImpactEvaluationExists(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'evaluationExists'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'evaluationExists',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'evaluationExists'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"isRevokedClaim"`.
 */
export function useImpactIsRevokedClaim(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'isRevokedClaim'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'isRevokedClaim',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'isRevokedClaim'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"isRevokedEvaluation"`.
 */
export function useImpactIsRevokedEvaluation(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'isRevokedEvaluation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'isRevokedEvaluation',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'isRevokedEvaluation'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"isValidClaim"`.
 */
export function useImpactIsValidClaim(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'isValidClaim'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'isValidClaim',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'isValidClaim'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"isValidEvaluation"`.
 */
export function useImpactIsValidEvaluation(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'isValidEvaluation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'isValidEvaluation',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'isValidEvaluation'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"readClaim"`.
 */
export function useImpactReadClaim(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'readClaim'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'readClaim',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'readClaim'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"readClaimAndEvaluationValue"`.
 */
export function useImpactReadClaimAndEvaluationValue(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'readClaimAndEvaluationValue'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'readClaimAndEvaluationValue',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'readClaimAndEvaluationValue'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"readClaimURI"`.
 */
export function useImpactReadClaimUri(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'readClaimURI'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'readClaimURI',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'readClaimURI'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"readClaimValue"`.
 */
export function useImpactReadClaimValue(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'readClaimValue'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'readClaimValue',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'readClaimValue'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"readEvaluation"`.
 */
export function useImpactReadEvaluation(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'readEvaluation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'readEvaluation',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'readEvaluation'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"readEvaluationURI"`.
 */
export function useImpactReadEvaluationUri(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'readEvaluationURI'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'readEvaluationURI',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'readEvaluationURI'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"readEvaluationValue"`.
 */
export function useImpactReadEvaluationValue(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'readEvaluationValue'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'readEvaluationValue',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'readEvaluationValue'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"validateEvaluations"`.
 */
export function useImpactValidateEvaluations(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'validateEvaluations'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'validateEvaluations',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'validateEvaluations'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"ATTESTATION_VALUE_TYPEHASH"`.
 */
export function useImpactAttestationValueTypehash(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'ATTESTATION_VALUE_TYPEHASH'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'ATTESTATION_VALUE_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'ATTESTATION_VALUE_TYPEHASH'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useImpactIsValidSignature(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'isValidSignature'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'isValidSignature'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"decodeClaimGeneratorID"`.
 */
export function useImpactDecodeClaimGeneratorId(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'decodeClaimGeneratorID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'decodeClaimGeneratorID',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'decodeClaimGeneratorID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"decodeClaimID"`.
 */
export function useImpactDecodeClaimId(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'decodeClaimID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'decodeClaimID',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'decodeClaimID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"decodeClaimRecordID"`.
 */
export function useImpactDecodeClaimRecordId(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'decodeClaimRecordID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'decodeClaimRecordID',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'decodeClaimRecordID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"decodeEvaluationClaimID"`.
 */
export function useImpactDecodeEvaluationClaimId(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'decodeEvaluationClaimID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'decodeEvaluationClaimID',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'decodeEvaluationClaimID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"decodeEvaluationGeneratorID"`.
 */
export function useImpactDecodeEvaluationGeneratorId(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'decodeEvaluationGeneratorID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'decodeEvaluationGeneratorID',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'decodeEvaluationGeneratorID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"decodeEvaluationID"`.
 */
export function useImpactDecodeEvaluationId(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'decodeEvaluationID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'decodeEvaluationID',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'decodeEvaluationID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"decodeEvaluationMethodologyID"`.
 */
export function useImpactDecodeEvaluationMethodologyId(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'decodeEvaluationMethodologyID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'decodeEvaluationMethodologyID',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'decodeEvaluationMethodologyID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"decodeEvaluationRecordID"`.
 */
export function useImpactDecodeEvaluationRecordId(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'decodeEvaluationRecordID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'decodeEvaluationRecordID',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'decodeEvaluationRecordID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"encodeEvaluationID"`.
 */
export function useImpactEncodeEvaluationId(
  config: Omit<
    UseContractReadConfig<typeof impactABI, 'encodeEvaluationID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: impactABI,
    functionName: 'encodeEvaluationID',
    ...config,
  } as UseContractReadConfig<typeof impactABI, 'encodeEvaluationID'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__.
 */
export function useImpactWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof impactABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof impactABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, TFunctionName>({
    abi: impactABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"burn"`.
 */
export function useImpactBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof impactABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'burn'> & {
        abi?: never;
        functionName?: 'burn';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'burn'>({
    abi: impactABI,
    functionName: 'burn',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"claim"`.
 */
export function useImpactClaim<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof impactABI, 'claim'>['abi'],
        'claim'
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'claim'> & {
        abi?: never;
        functionName?: 'claim';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'claim'>({
    abi: impactABI,
    functionName: 'claim',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"claimWithSignature"`.
 */
export function useImpactClaimWithSignature<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof impactABI,
          'claimWithSignature'
        >['abi'],
        'claimWithSignature'
      > & { functionName?: 'claimWithSignature' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'claimWithSignature'> & {
        abi?: never;
        functionName?: 'claimWithSignature';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'claimWithSignature'>({
    abi: impactABI,
    functionName: 'claimWithSignature',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"revokeClaim"`.
 */
export function useImpactRevokeClaim<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof impactABI, 'revokeClaim'>['abi'],
        'revokeClaim'
      > & { functionName?: 'revokeClaim' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'revokeClaim'> & {
        abi?: never;
        functionName?: 'revokeClaim';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'revokeClaim'>({
    abi: impactABI,
    functionName: 'revokeClaim',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"revokeClaimWithSignature"`.
 */
export function useImpactRevokeClaimWithSignature<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof impactABI,
          'revokeClaimWithSignature'
        >['abi'],
        'revokeClaimWithSignature'
      > & { functionName?: 'revokeClaimWithSignature' }
    : UseContractWriteConfig<
        TMode,
        typeof impactABI,
        'revokeClaimWithSignature'
      > & {
        abi?: never;
        functionName?: 'revokeClaimWithSignature';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'revokeClaimWithSignature'>({
    abi: impactABI,
    functionName: 'revokeClaimWithSignature',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useImpactSafeBatchTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof impactABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof impactABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeBatchTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'safeBatchTransferFrom'>({
    abi: impactABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useImpactSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof impactABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'safeTransferFrom'>({
    abi: impactABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useImpactSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof impactABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'setApprovalForAll'>({
    abi: impactABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"evaluate"`.
 */
export function useImpactEvaluate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof impactABI, 'evaluate'>['abi'],
        'evaluate'
      > & { functionName?: 'evaluate' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'evaluate'> & {
        abi?: never;
        functionName?: 'evaluate';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'evaluate'>({
    abi: impactABI,
    functionName: 'evaluate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"evaluateWithSignature"`.
 */
export function useImpactEvaluateWithSignature<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof impactABI,
          'evaluateWithSignature'
        >['abi'],
        'evaluateWithSignature'
      > & { functionName?: 'evaluateWithSignature' }
    : UseContractWriteConfig<
        TMode,
        typeof impactABI,
        'evaluateWithSignature'
      > & {
        abi?: never;
        functionName?: 'evaluateWithSignature';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'evaluateWithSignature'>({
    abi: impactABI,
    functionName: 'evaluateWithSignature',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"revokeEvaluation"`.
 */
export function useImpactRevokeEvaluation<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof impactABI, 'revokeEvaluation'>['abi'],
        'revokeEvaluation'
      > & { functionName?: 'revokeEvaluation' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'revokeEvaluation'> & {
        abi?: never;
        functionName?: 'revokeEvaluation';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'revokeEvaluation'>({
    abi: impactABI,
    functionName: 'revokeEvaluation',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"revokeEvaluationWithSignature"`.
 */
export function useImpactRevokeEvaluationWithSignature<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof impactABI,
          'revokeEvaluationWithSignature'
        >['abi'],
        'revokeEvaluationWithSignature'
      > & { functionName?: 'revokeEvaluationWithSignature' }
    : UseContractWriteConfig<
        TMode,
        typeof impactABI,
        'revokeEvaluationWithSignature'
      > & {
        abi?: never;
        functionName?: 'revokeEvaluationWithSignature';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof impactABI,
    'revokeEvaluationWithSignature'
  >({
    abi: impactABI,
    functionName: 'revokeEvaluationWithSignature',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"invalidateDataHash"`.
 */
export function useImpactInvalidateDataHash<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof impactABI,
          'invalidateDataHash'
        >['abi'],
        'invalidateDataHash'
      > & { functionName?: 'invalidateDataHash' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'invalidateDataHash'> & {
        abi?: never;
        functionName?: 'invalidateDataHash';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'invalidateDataHash'>({
    abi: impactABI,
    functionName: 'invalidateDataHash',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"invalidateUnorderedNonces"`.
 */
export function useImpactInvalidateUnorderedNonces<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof impactABI,
          'invalidateUnorderedNonces'
        >['abi'],
        'invalidateUnorderedNonces'
      > & { functionName?: 'invalidateUnorderedNonces' }
    : UseContractWriteConfig<
        TMode,
        typeof impactABI,
        'invalidateUnorderedNonces'
      > & {
        abi?: never;
        functionName?: 'invalidateUnorderedNonces';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'invalidateUnorderedNonces'>(
    {
      abi: impactABI,
      functionName: 'invalidateUnorderedNonces',
      ...config,
    } as any
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"multicall"`.
 */
export function useImpactMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof impactABI, 'multicall'>['abi'],
        'multicall'
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof impactABI, 'multicall'> & {
        abi?: never;
        functionName?: 'multicall';
      } = {} as any
) {
  return useContractWrite<TMode, typeof impactABI, 'multicall'>({
    abi: impactABI,
    functionName: 'multicall',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__.
 */
export function usePrepareImpactWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareImpactBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'burn'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareImpactClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'claim'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'claim'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"claimWithSignature"`.
 */
export function usePrepareImpactClaimWithSignature(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'claimWithSignature'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'claimWithSignature',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'claimWithSignature'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"revokeClaim"`.
 */
export function usePrepareImpactRevokeClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'revokeClaim'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'revokeClaim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'revokeClaim'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"revokeClaimWithSignature"`.
 */
export function usePrepareImpactRevokeClaimWithSignature(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'revokeClaimWithSignature'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'revokeClaimWithSignature',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'revokeClaimWithSignature'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareImpactSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'safeBatchTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'safeBatchTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareImpactSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareImpactSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"evaluate"`.
 */
export function usePrepareImpactEvaluate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'evaluate'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'evaluate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'evaluate'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"evaluateWithSignature"`.
 */
export function usePrepareImpactEvaluateWithSignature(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'evaluateWithSignature'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'evaluateWithSignature',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'evaluateWithSignature'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"revokeEvaluation"`.
 */
export function usePrepareImpactRevokeEvaluation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'revokeEvaluation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'revokeEvaluation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'revokeEvaluation'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"revokeEvaluationWithSignature"`.
 */
export function usePrepareImpactRevokeEvaluationWithSignature(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof impactABI,
      'revokeEvaluationWithSignature'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'revokeEvaluationWithSignature',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'revokeEvaluationWithSignature'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"invalidateDataHash"`.
 */
export function usePrepareImpactInvalidateDataHash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'invalidateDataHash'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'invalidateDataHash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'invalidateDataHash'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"invalidateUnorderedNonces"`.
 */
export function usePrepareImpactInvalidateUnorderedNonces(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof impactABI,
      'invalidateUnorderedNonces'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'invalidateUnorderedNonces',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'invalidateUnorderedNonces'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link impactABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareImpactMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof impactABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: impactABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof impactABI, 'multicall'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__.
 */
export function useImpactEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof impactABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    ...config,
  } as UseContractEventConfig<typeof impactABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useImpactApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof impactABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof impactABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__ and `eventName` set to `"Claimed"`.
 */
export function useImpactClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof impactABI, 'Claimed'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    eventName: 'Claimed',
    ...config,
  } as UseContractEventConfig<typeof impactABI, 'Claimed'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__ and `eventName` set to `"RevokedClaim"`.
 */
export function useImpactRevokedClaimEvent(
  config: Omit<
    UseContractEventConfig<typeof impactABI, 'RevokedClaim'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    eventName: 'RevokedClaim',
    ...config,
  } as UseContractEventConfig<typeof impactABI, 'RevokedClaim'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useImpactTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof impactABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof impactABI, 'TransferBatch'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useImpactTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof impactABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof impactABI, 'TransferSingle'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__ and `eventName` set to `"Evaluated"`.
 */
export function useImpactEvaluatedEvent(
  config: Omit<
    UseContractEventConfig<typeof impactABI, 'Evaluated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    eventName: 'Evaluated',
    ...config,
  } as UseContractEventConfig<typeof impactABI, 'Evaluated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__ and `eventName` set to `"RevokedEvaluation"`.
 */
export function useImpactRevokedEvaluationEvent(
  config: Omit<
    UseContractEventConfig<typeof impactABI, 'RevokedEvaluation'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    eventName: 'RevokedEvaluation',
    ...config,
  } as UseContractEventConfig<typeof impactABI, 'RevokedEvaluation'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__ and `eventName` set to `"URI"`.
 */
export function useImpactUriEvent(
  config: Omit<
    UseContractEventConfig<typeof impactABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof impactABI, 'URI'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link impactABI}__ and `eventName` set to `"UnorderedNonceInvalidation"`.
 */
export function useImpactUnorderedNonceInvalidationEvent(
  config: Omit<
    UseContractEventConfig<typeof impactABI, 'UnorderedNonceInvalidation'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: impactABI,
    eventName: 'UnorderedNonceInvalidation',
    ...config,
  } as UseContractEventConfig<typeof impactABI, 'UnorderedNonceInvalidation'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link retirementsABI}__.
 */
export function useRetirements(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: retirementsABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__.
 */
export function useRetirementsRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"accountsByToken"`.
 */
export function useRetirementsAccountsByToken(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'accountsByToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'accountsByToken',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'accountsByToken'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useRetirementsBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useRetirementsBalanceOfBatch(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'balanceOfBatch'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'balanceOfBatch'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useRetirementsIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'isApprovedForAll'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useRetirementsOnErc1155BatchReceived(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'onERC1155BatchReceived'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useRetirementsOnErc1155Received(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'onERC1155Received'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useRetirementsSetApprovalForAll(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"tokensByAccount"`.
 */
export function useRetirementsTokensByAccount(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'tokensByAccount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'tokensByAccount',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'tokensByAccount'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"totalHolders"`.
 */
export function useRetirementsTotalHolders(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'totalHolders'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'totalHolders',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'totalHolders'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useRetirementsTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'totalSupply'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"name"`.
 */
export function useRetirementsName(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"symbol"`.
 */
export function useRetirementsSymbol(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"uri"`.
 */
export function useRetirementsUri(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'uri'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'uri'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"decodeRetirementClaimID"`.
 */
export function useRetirementsDecodeRetirementClaimId(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'decodeRetirementClaimID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'decodeRetirementClaimID',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'decodeRetirementClaimID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"decodeRetirementEvaluationID"`.
 */
export function useRetirementsDecodeRetirementEvaluationId(
  config: Omit<
    UseContractReadConfig<
      typeof retirementsABI,
      'decodeRetirementEvaluationID'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'decodeRetirementEvaluationID',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'decodeRetirementEvaluationID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"decodeRetirementID"`.
 */
export function useRetirementsDecodeRetirementId(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'decodeRetirementID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'decodeRetirementID',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'decodeRetirementID'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"encodeRetirementID"`.
 */
export function useRetirementsEncodeRetirementId(
  config: Omit<
    UseContractReadConfig<typeof retirementsABI, 'encodeRetirementID'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: retirementsABI,
    functionName: 'encodeRetirementID',
    ...config,
  } as UseContractReadConfig<typeof retirementsABI, 'encodeRetirementID'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link retirementsABI}__.
 */
export function useRetirementsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof retirementsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof retirementsABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof retirementsABI, TFunctionName>({
    abi: retirementsABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"issue"`.
 */
export function useRetirementsIssue<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof retirementsABI, 'issue'>['abi'],
        'issue'
      > & { functionName?: 'issue' }
    : UseContractWriteConfig<TMode, typeof retirementsABI, 'issue'> & {
        abi?: never;
        functionName?: 'issue';
      } = {} as any
) {
  return useContractWrite<TMode, typeof retirementsABI, 'issue'>({
    abi: retirementsABI,
    functionName: 'issue',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useRetirementsSafeBatchTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof retirementsABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof retirementsABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeBatchTransferFrom';
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof retirementsABI,
    'safeBatchTransferFrom'
  >({
    abi: retirementsABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useRetirementsSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof retirementsABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof retirementsABI,
        'safeTransferFrom'
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof retirementsABI, 'safeTransferFrom'>({
    abi: retirementsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"multicall"`.
 */
export function useRetirementsMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof retirementsABI, 'multicall'>['abi'],
        'multicall'
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof retirementsABI, 'multicall'> & {
        abi?: never;
        functionName?: 'multicall';
      } = {} as any
) {
  return useContractWrite<TMode, typeof retirementsABI, 'multicall'>({
    abi: retirementsABI,
    functionName: 'multicall',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link retirementsABI}__.
 */
export function usePrepareRetirementsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof retirementsABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: retirementsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof retirementsABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"issue"`.
 */
export function usePrepareRetirementsIssue(
  config: Omit<
    UsePrepareContractWriteConfig<typeof retirementsABI, 'issue'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: retirementsABI,
    functionName: 'issue',
    ...config,
  } as UsePrepareContractWriteConfig<typeof retirementsABI, 'issue'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareRetirementsSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof retirementsABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: retirementsABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof retirementsABI, 'safeBatchTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareRetirementsSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof retirementsABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: retirementsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof retirementsABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link retirementsABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareRetirementsMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof retirementsABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: retirementsABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof retirementsABI, 'multicall'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link retirementsABI}__.
 */
export function useRetirementsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof retirementsABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: retirementsABI,
    ...config,
  } as UseContractEventConfig<typeof retirementsABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link retirementsABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useRetirementsApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof retirementsABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: retirementsABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof retirementsABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link retirementsABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useRetirementsTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof retirementsABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: retirementsABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof retirementsABI, 'TransferBatch'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link retirementsABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useRetirementsTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof retirementsABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: retirementsABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof retirementsABI, 'TransferSingle'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link retirementsABI}__ and `eventName` set to `"URI"`.
 */
export function useRetirementsUriEvent(
  config: Omit<
    UseContractEventConfig<typeof retirementsABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: retirementsABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof retirementsABI, 'URI'>);
}
